**Документация за AuthorsController**

### **Общ преглед**
`AuthorsController` отговаря за управлението на авторите в приложението. Той предоставя CRUD (Създаване, Четене, Актуализиране, Изтриване) операции за взаимодействие с базата данни `ApplicationDbContext`.

---

### **Крайни точки и техните функции**

#### **1. `Index()` - Списък на всички автори**
**Метод:** `GET`
- Извлича всички автори от базата данни и ги връща към изгледа.
- Използва `ToListAsync()` за асинхронно извличане на авторите.

#### **2. `Details(int? id)` - Преглед на детайли за автор**
**Метод:** `GET`
- Извлича конкретен автор по неговото ID.
- Ако ID е `null` или авторът не е намерен, връща `NotFound()`.
- Включва свързаните книги чрез `.Include(r => r.Books)`.

#### **3. `Create()` - Показване на формуляр за създаване на автор**
**Метод:** `GET`
- Връща изглед за създаване на нов автор.

#### **4. `Create(Author author, IFormFile ImageFile)` - Добавяне на нов автор**
**Метод:** `POST`
- Получава данни от формуляра и записва нов автор.
- Ако е качен файл с изображение, той се записва в директорията `wwwroot/uploads/`.
- Ако не е предоставено изображение, задава се профилна снимка по подразбиране.
- Запазва новия автор и пренасочва към `Index`.

#### **5. `Edit(int? id)` - Показване на формуляр за редактиране на автор**
**Метод:** `GET`
- Извлича автор по ID и връща изглед за редактиране.
- Ако авторът не е намерен, връща `NotFound()`.

#### **6. `Edit(int id, Author author, IFormFile? ImageFile)` - Актуализиране на автор**
**Метод:** `POST`
- Актуализира данните на автора.
- Ако е качено ново изображение, старото се изтрива.
- Запазва промените в базата данни и пренасочва към `Index`.

#### **7. `Delete(int? id)` - Показване на страница за потвърждение на изтриване**
**Метод:** `GET`
- Извлича автор по ID и показва страница за потвърждение на изтриването.
- Ако авторът не е намерен, връща `NotFound()`.

#### **8. `DeleteConfirmed(int id)` - Изтриване на автор**
**Метод:** `POST`
- Премахва автора от базата данни.
- Запазва промените и пренасочва към `Index`.

---

### **Помощни методи**

#### **1. `AuthorExists(int id)`**
- Проверява дали даден автор съществува в базата данни.
- Използва се за предотвратяване на грешки при актуализиране/изтриване.

---

### **Основни функции и поведение**
- **Асинхронен достъп до данни:** Използва `async` и `await` за неблокиращи операции с базата данни.
- **Обработка на качване на файлове:** Обработва изображения за профилите на авторите.
- **Обработка на грешки:** Връща `NotFound()` при липсващи записи.
- **Валидиране на модела:** Използва `ModelState.IsValid`, за да гарантира коректни входни данни.

---

### **Възможни подобрения**
- Добавяне на странична номерация за метода `Index`.
- Добавяне на валидация за формати на файлове в `Create` и `Edit`.
- Реализиране на "меко изтриване" вместо окончателно премахване.

---

### **Заключение**
`AuthorsController` ефективно управлява авторите, позволявайки на потребителите да създават, редактират, преглеждат и изтриват записи за автори, като същевременно осигурява сигурна обработка на профилните снимки. Използването на `ApplicationDbContext` гарантира безпроблемна интеграция с базата данни.

